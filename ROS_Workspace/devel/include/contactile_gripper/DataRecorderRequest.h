// Generated by gencpp from file contactile_gripper/DataRecorderRequest.msg
// DO NOT EDIT!


#ifndef CONTACTILE_GRIPPER_MESSAGE_DATARECORDERREQUEST_H
#define CONTACTILE_GRIPPER_MESSAGE_DATARECORDERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace contactile_gripper
{
template <class ContainerAllocator>
struct DataRecorderRequest_
{
  typedef DataRecorderRequest_<ContainerAllocator> Type;

  DataRecorderRequest_()
    : file_prefix()
    , topic_list()
    , stop(false)  {
    }
  DataRecorderRequest_(const ContainerAllocator& _alloc)
    : file_prefix(_alloc)
    , topic_list(_alloc)
    , stop(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _file_prefix_type;
  _file_prefix_type file_prefix;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _topic_list_type;
  _topic_list_type topic_list;

   typedef uint8_t _stop_type;
  _stop_type stop;





  typedef boost::shared_ptr< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DataRecorderRequest_

typedef ::contactile_gripper::DataRecorderRequest_<std::allocator<void> > DataRecorderRequest;

typedef boost::shared_ptr< ::contactile_gripper::DataRecorderRequest > DataRecorderRequestPtr;
typedef boost::shared_ptr< ::contactile_gripper::DataRecorderRequest const> DataRecorderRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::contactile_gripper::DataRecorderRequest_<ContainerAllocator1> & lhs, const ::contactile_gripper::DataRecorderRequest_<ContainerAllocator2> & rhs)
{
  return lhs.file_prefix == rhs.file_prefix &&
    lhs.topic_list == rhs.topic_list &&
    lhs.stop == rhs.stop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::contactile_gripper::DataRecorderRequest_<ContainerAllocator1> & lhs, const ::contactile_gripper::DataRecorderRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace contactile_gripper

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86296c4752d7ffaaedf71fd495fe5e5f";
  }

  static const char* value(const ::contactile_gripper::DataRecorderRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86296c4752d7ffaaULL;
  static const uint64_t static_value2 = 0xedf71fd495fe5e5fULL;
};

template<class ContainerAllocator>
struct DataType< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "contactile_gripper/DataRecorderRequest";
  }

  static const char* value(const ::contactile_gripper::DataRecorderRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string file_prefix\n"
"string[] topic_list\n"
"bool stop\n"
;
  }

  static const char* value(const ::contactile_gripper::DataRecorderRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.file_prefix);
      stream.next(m.topic_list);
      stream.next(m.stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DataRecorderRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::contactile_gripper::DataRecorderRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::contactile_gripper::DataRecorderRequest_<ContainerAllocator>& v)
  {
    s << indent << "file_prefix: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.file_prefix);
    s << indent << "topic_list[]" << std::endl;
    for (size_t i = 0; i < v.topic_list.size(); ++i)
    {
      s << indent << "  topic_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic_list[i]);
    }
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTACTILE_GRIPPER_MESSAGE_DATARECORDERREQUEST_H
