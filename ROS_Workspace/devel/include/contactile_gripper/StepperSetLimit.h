// Generated by gencpp from file contactile_gripper/StepperSetLimit.msg
// DO NOT EDIT!


#ifndef CONTACTILE_GRIPPER_MESSAGE_STEPPERSETLIMIT_H
#define CONTACTILE_GRIPPER_MESSAGE_STEPPERSETLIMIT_H

#include <ros/service_traits.h>


#include <contactile_gripper/StepperSetLimitRequest.h>
#include <contactile_gripper/StepperSetLimitResponse.h>


namespace contactile_gripper
{

struct StepperSetLimit
{

typedef StepperSetLimitRequest Request;
typedef StepperSetLimitResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct StepperSetLimit
} // namespace contactile_gripper


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::contactile_gripper::StepperSetLimit > {
  static const char* value()
  {
    return "5b0187267379b2af4b8e7118fa12084a";
  }

  static const char* value(const ::contactile_gripper::StepperSetLimit&) { return value(); }
};

template<>
struct DataType< ::contactile_gripper::StepperSetLimit > {
  static const char* value()
  {
    return "contactile_gripper/StepperSetLimit";
  }

  static const char* value(const ::contactile_gripper::StepperSetLimit&) { return value(); }
};


// service_traits::MD5Sum< ::contactile_gripper::StepperSetLimitRequest> should match
// service_traits::MD5Sum< ::contactile_gripper::StepperSetLimit >
template<>
struct MD5Sum< ::contactile_gripper::StepperSetLimitRequest>
{
  static const char* value()
  {
    return MD5Sum< ::contactile_gripper::StepperSetLimit >::value();
  }
  static const char* value(const ::contactile_gripper::StepperSetLimitRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::contactile_gripper::StepperSetLimitRequest> should match
// service_traits::DataType< ::contactile_gripper::StepperSetLimit >
template<>
struct DataType< ::contactile_gripper::StepperSetLimitRequest>
{
  static const char* value()
  {
    return DataType< ::contactile_gripper::StepperSetLimit >::value();
  }
  static const char* value(const ::contactile_gripper::StepperSetLimitRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::contactile_gripper::StepperSetLimitResponse> should match
// service_traits::MD5Sum< ::contactile_gripper::StepperSetLimit >
template<>
struct MD5Sum< ::contactile_gripper::StepperSetLimitResponse>
{
  static const char* value()
  {
    return MD5Sum< ::contactile_gripper::StepperSetLimit >::value();
  }
  static const char* value(const ::contactile_gripper::StepperSetLimitResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::contactile_gripper::StepperSetLimitResponse> should match
// service_traits::DataType< ::contactile_gripper::StepperSetLimit >
template<>
struct DataType< ::contactile_gripper::StepperSetLimitResponse>
{
  static const char* value()
  {
    return DataType< ::contactile_gripper::StepperSetLimit >::value();
  }
  static const char* value(const ::contactile_gripper::StepperSetLimitResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // CONTACTILE_GRIPPER_MESSAGE_STEPPERSETLIMIT_H
